#!/usr/bin/env python3
"""
Script de v√©rification compl√®te du syst√®me
V√©rifie que tous les composants fonctionnent correctement
"""

import os
import sys
import importlib
import requests
import json
from pathlib import Path

def check_python_version():
    """V√©rifier la version de Python"""
    print("üêç V√©rification de Python...")
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print(f"‚ùå Python {version.major}.{version.minor} d√©tect√©")
        print("   Python 3.8+ requis")
        return False
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro}")
    return True

def check_dependencies():
    """V√©rifier les d√©pendances"""
    print("\nüì¶ V√©rification des d√©pendances...")
    
    required_packages = [
        'flask',
        'flask-sqlalchemy', 
        'flask-jwt-extended',
        'bcrypt',
        'requests'
    ]
    
    missing = []
    for package in required_packages:
        try:
            importlib.import_module(package.replace('-', '_'))
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package} - MANQUANT")
            missing.append(package)
    
    if missing:
        print(f"\n‚ö†Ô∏è  Packages manquants: {', '.join(missing)}")
        print("   Ex√©cutez: pip install -r requirements.txt")
        return False
    
    return True

def check_files():
    """V√©rifier la pr√©sence des fichiers essentiels"""
    print("\nüìÅ V√©rification des fichiers...")
    
    required_files = [
        'run.py',
        'requirements.txt',
        'src/__init__.py',
        'src/app_config.py',
        'src/models.py',
        'src/routes.py',
        'templates/index.html',
        'static/style.css',
        'static/app.js',
        'static/auth.js'
    ]
    
    missing = []
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path} - MANQUANT")
            missing.append(file_path)
    
    if missing:
        print(f"\n‚ö†Ô∏è  Fichiers manquants: {len(missing)}")
        return False
    
    return True

def check_database():
    """V√©rifier la base de donn√©es"""
    print("\nüóÑÔ∏è  V√©rification de la base de donn√©es...")
    
    db_path = 'tasks.db'
    if os.path.exists(db_path):
        print(f"‚úÖ Base de donn√©es trouv√©e: {db_path}")
        size = os.path.getsize(db_path)
        print(f"   Taille: {size} octets")
        return True
    else:
        print(f"‚ö†Ô∏è  Base de donn√©es non trouv√©e: {db_path}")
        print("   Elle sera cr√©√©e au premier d√©marrage")
        return True

def check_server():
    """V√©rifier que le serveur peut d√©marrer"""
    print("\nüåê Test du serveur...")
    
    try:
        # Importer et configurer l'app
        from src.app_config import create_app
        app = create_app()
        
        # Tester la configuration
        with app.app_context():
            from src.models import db
            db.create_all()
            print("‚úÖ Base de donn√©es initialis√©e")
        
        print("‚úÖ Serveur Flask configur√© correctement")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur serveur: {e}")
        return False

def run_tests():
    """Ex√©cuter les tests"""
    print("\nüß™ Ex√©cution des tests...")
    
    try:
        import subprocess
        result = subprocess.run([sys.executable, 'test_complete.py'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Tests automatis√©s r√©ussis")
            return True
        else:
            print("‚ùå Tests √©chou√©s:")
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors des tests: {e}")
        return False

def check_web_interface():
    """V√©rifier l'interface web"""
    print("\nüåê Test de l'interface web...")
    
    try:
        # D√©marrer le serveur en arri√®re-plan
        import subprocess
        import time
        
        process = subprocess.Popen([sys.executable, 'run.py'], 
                                 stdout=subprocess.PIPE, 
                                 stderr=subprocess.PIPE)
        
        # Attendre que le serveur d√©marre
        time.sleep(3)
        
        # Tester l'endpoint principal
        response = requests.get('http://localhost:5000', timeout=5)
        
        if response.status_code == 200:
            print("‚úÖ Interface web accessible")
            
            # Tester l'API
            api_response = requests.get('http://localhost:5000/api/tasks')
            if api_response.status_code in [200, 401]:  # 401 = non authentifi√© (normal)
                print("‚úÖ API accessible")
            else:
                print(f"‚ö†Ô∏è  API: {api_response.status_code}")
                
        else:
            print(f"‚ùå Interface web: {response.status_code}")
        
        # Arr√™ter le serveur
        process.terminate()
        process.wait()
        
        return True
        
    except requests.exceptions.ConnectionError:
        print("‚ùå Impossible de se connecter au serveur")
        return False
    except Exception as e:
        print(f"‚ùå Erreur interface web: {e}")
        return False

def main():
    """V√©rification compl√®te du syst√®me"""
    print("üîç V√©rification compl√®te du syst√®me")
    print("=" * 50)
    
    checks = [
        ("Python", check_python_version),
        ("D√©pendances", check_dependencies),
        ("Fichiers", check_files),
        ("Base de donn√©es", check_database),
        ("Serveur", check_server),
        ("Tests", run_tests),
        ("Interface web", check_web_interface)
    ]
    
    results = []
    for name, check_func in checks:
        try:
            result = check_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå Erreur lors de la v√©rification {name}: {e}")
            results.append((name, False))
    
    # R√©sum√©
    print("\n" + "=" * 50)
    print("üìä R√âSUM√â DES V√âRIFICATIONS")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{name:15} {status}")
        if result:
            passed += 1
    
    print(f"\nR√©sultat: {passed}/{total} v√©rifications r√©ussies")
    
    if passed == total:
        print("\nüéâ SYST√àME PR√äT POUR LA PR√âSENTATION !")
        print("\nüìã Instructions pour la pr√©sentation:")
        print("1. Ex√©cutez: ./start_presentation.sh")
        print("2. Ouvrez http://localhost:5000")
        print("3. Cr√©ez un compte et testez les fonctionnalit√©s")
        return True
    else:
        print(f"\n‚ö†Ô∏è  {total - passed} probl√®me(s) d√©tect√©(s)")
        print("Corrigez les probl√®mes avant la pr√©sentation")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 